noncomputable def terminates_in (cfg : Com × Store) (σ' : Store) : ℝ :=
  ∑' n : ℕ, terminates_in_n n cfg σ'



  terminates_in_n i prog \sigma


  import Mathlib.Data.Nat.Basic import Mathlib.Data.Real.Basic import Std.Data.HashMap.Basic import Mathlib.Algebra.BigOperators.Group.Finset.Basic import Mathlib.Analysis.PSerieschat




-- n-step evaluation
def eval : ℕ → Com × Store → List ((Com × Store) × ℝ)
  | 0, cfg => [ (cfg, 1.0) ]
  | (Nat.succ n), cfg =>
    let prev := eval n cfg

    let






    let result := evalAux prev []
    result
  where
    evalAux : List ((Com × Store) × ℝ) → List ((Com × Store) × ℝ) → List ((Com × Store) × ℝ)
      | [], acc => acc
      | ((c₁, σ₁), p₁) :: rest, acc =>
        let steps := oneStep (c₁, σ₁)
        let acc' := steps.foldl (fun acc2 ((c₂, σ₂), p₂) => ((c₂, σ₂), p₁ * p₂) :: acc2) acc
        evalAux rest acc'






        def terminates_in_n (n : ℕ) (cfg : Com × Store) (σ' : Store) : ℝ
  let reachable := eval n cfg
  let rec loop : List ((Com × Store) × ℝ) → ℝ → ℝ
    | [], acc => acc
    | ((c, σ), p) :: rest, acc =>
      if decide (c = Com.skip) then
        if storeEq σ σ' then loop rest (acc + p) else loop rest acc
      else loop rest acc
  loop reachable 0.0




  def terminates_in_n (n : ℕ) (cfg : Com × Store) (σ' : Store) : ℝ :=
  let reachable := eval n cfg
  let rec loop : List ((Com × Store) × ℝ) → ℝ → ℝ
    | [], acc => acc
    | ((c, σ), p) :: rest, acc =>
      if decide (c = Com.skip) then
        if storeEq σ σ' then loop rest (acc + p) else loop rest acc
      else loop rest acc
  loop reachable 0.0






  def oneStep : Com × Store → List ((Com × Store) × ℚ)
  | (Com.skip, _) => []
  | (Com.assign x n, σ) =>
      [((Com.skip, update σ x (aeval n σ)), 1.0)]
  | (Com.seq Com.skip c2, σ) =>
      [((c2, σ), 1.0)]
  | (Com.seq c1 c2, σ) =>
      oneStep (c1, σ) |>.map (fun ((c1', σ'), p) => ((Com.seq c1' c2, σ'), p))
  | (Com.ite b ct cf, σ) =>
      if beval b σ then [((ct, σ), 1.0)] else [((cf, σ), 1.0)]
  | (Com.while b c, σ) =>
      if beval b σ then [((Com.seq c (Com.while b c), σ), 1.0)] else [((Com.skip, σ), 1.0)]
  | (Com.randbit x, σ) =>
      [((Com.skip, update σ x 0), 0.5), ((Com.skip, update σ x 1), 0.5)]






def eval : ℕ → Com × Store → List ((Com × Store) × ℚ)
  | 0, cfg => [ (cfg, 1.0) ]
  | (Nat.succ n), cfg =>
    let prev := eval n cfg
    let result := Aux5  prev
    result




def Aux1 : List ((Com × Store) × ℚ) × ℚ → List ((Com × Store) × ℚ)
  | (xs, r) => List.map (fun (cs, p) => (cs, r * p)) xs

def Aux2 : (Com × Store) × ℚ → List ((Com × Store) × ℚ) × ℚ
    | ((c, σ), r) => (oneStep (c, σ), r)

def Aux3 : List ((Com × Store) × ℚ) → List (List ((Com × Store) × ℚ))
    | xs => List.map (Aux1 ∘ Aux2) xs

def Aux4 : List (List ((Com × Store) × ℚ)) → List ((Com × Store) × ℚ)
  | xs => xs.foldr (· ++ ·) []

def Aux5 : List ((Com × Store) × ℚ) → List ((Com × Store) × ℚ) :=
    (Aux4 ∘ Aux3)




def eval : ℕ → Com × Store → List ((Com × Store) × ℚ)
  | 0, cfg => [ (cfg, 1.0) ]
  | (Nat.succ n), cfg => step (eval n cfg)
where
  step : List ((Com × Store) × ℚ) → List ((Com × Store) × ℚ)
    | [] => []
    | c :: xs => (oneStep c) ++ (step xs)










def iterate {α}(f : α → α) : ℕ → α → α
  | 0     => id
  | n + 1 => f ∘ iterate f n

def Aux7 (σ' : Store): List ((Com × Store) × ℚ) × ℚ → List ((Com × Store) × ℚ) × ℚ
    | ([], r) => ([], r)
    | (((c, σ), r) :: rest, a) =>
            if decide (c = Com.skip) ∧ storeEq σ σ' then
                (rest, r + a)
            else (rest, a)

def terminates_in_n (n : ℕ) (cfg : Com × Store) (σ' : Store) : ℚ :=
    let configs := eval n cfg
    let len := List.length configs
    let iter := iterate (Aux7 σ') len
    (iter (configs, 0.0)).2



lemma secondlemma (n : ℕ) : ¬ (∃ (k : ℕ ), 6 + 5*k = n) → terminates_in_n n (prog, startstate) termstate1 = 0 := by sorry


lemma thirdlemma (N : ℕ): ∑ i ∈ range (N), terminates_in_n (i + 1) (prog, startstate) termstate1 =
                        (1-(1/4)^(N))/3 := by sorry

theorem main : ∑' i : ℕ, terminates_in_n i (prog, startstate) termstate1 = 1/3 := by sorry

theorem main : terminates_in (prog, startstate) termstate1 = 1/3 := by sorry



 [((Com.skip, Std.HashMap.ofList [("y", 0), ("x", 0)]), (1 : Rat)/4),
 ((Com.skip, Std.HashMap.ofList [("y", 1), ("x", 0)]), (1 : Rat)/4),
 ((Com.skip, Std.HashMap.ofList [("y", 0), ("x", 1)]), (1 : Rat)/4),
 ((Com.seq
     (Com.seq (Com.randbit "x") (Com.randbit "y"))
     (Com.while
       (BExp.and (BExp.eq (AExp.var "x") (AExp.const 1)) (BExp.eq (AExp.var "y") (AExp.const 1)))
       (Com.seq (Com.randbit "x") (Com.randbit "y"))),
   Std.HashMap.ofList [("y", 1), ("x", 1)]),
  (1 : Rat)/4)] := by unfold eval; unfold eval
