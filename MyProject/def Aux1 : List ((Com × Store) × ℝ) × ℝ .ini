def Aux1 : List ((Com × Store) × ℝ) × ℝ → List ((Com × Store) × ℝ)
  | (xs, r) => List.map (fun (cs, p) => (cs, r * p)) xs

def Aux2 : (Com × Store) × ℝ → List ((Com × Store) × ℝ) × ℝ
    | ((c, σ), r) => (oneStep (c, σ), r)

def Aux3 : List ((Com × Store) × ℝ) → List (List ((Com × Store) × ℝ))
    | xs => List.map (Aux1 ∘ Aux2) xs

def Aux4 : List (List ((Com × Store) × ℝ)) → List ((Com × Store) × ℝ)
  | xs => xs.foldr (· ++ ·) []

def Aux5 : List ((Com × Store) × ℝ) → List ((Com × Store) × ℝ) :=
    (Aux4 ∘ Aux3)



def eval : ℕ → Com × Store → List ((Com × Store) × ℝ)
  | 0, cfg => [ (cfg, 1.0) ]
  | (Nat.succ n), cfg =>
    let prev := eval n cfg
    let result := Aux5  prev
    result



def iterate (f : α → α) : ℕ → α → α
  | 0     => id
  | n + 1 => f ∘ iterate f n





def Aux7 (σ' : Store): List ((Com × Store) × ℝ) × ℝ → List ((Com × Store) × ℝ) × ℝ
    | ([], r) => ([], r)
    | (((c, σ), r) :: rest, a) =>
            if decide (c = Com.skip) ∧ storeEq σ σ' then
                (rest, r + a)
            else (rest, a)




def terminates_in_n (n : ℕ) (cfg : Com × Store) (σ' : Store) : ℝ :=
    let configs := eval n cfg
    let len := List.length configs
    let iter := iterate (Aux7 σ') len
    (iter (configs, 0.0)).2





    def iterate (f : α → α) : ℕ → α → α
  | 0     => id
  | n + 1 => f ∘ iterate f n





def Aux7 (σ' : Store): List ((Com × Store) × ℝ) × ℝ → List ((Com × Store) × ℝ) × ℝ
    | ([], r) => ([], r)
    | (((c, σ), r) :: rest, a) =>
            if decide (c = Com.skip) ∧ storeEq σ σ' then
                (rest, r + a)
            else (rest, a)




def terminates_in_n (n : ℕ) (cfg : Com × Store) (σ' : Store) : ℝ :=
    let configs := eval n cfg
    let len := List.length configs
    let iter := iterate (Aux7 σ') len
    (iter (configs, 0.0)).2




def terminates_in_n (n : ℕ) (cfg : Com × Store) (σ' : Store) : ℚ :=
  let configs := eval n cfg
  configs.foldl
    (fun acc ((c, σ), p) =>
      if c = Com.skip ∧ storeEq σ σ' then acc + p else acc)
    0.0



def iterate (f : α → α) : ℕ → α → α
  | 0     => id
  | n + 1 => f ∘ iterate f n





def Aux7 (σ' : Store): List ((Com × Store) × ℚ) × ℚ → List ((Com × Store) × ℚ) × ℚ
    | ([], r) => ([], r)
    | (((c, σ), r) :: rest, a) =>
            if decide (c = Com.skip) ∧ storeEq σ σ' then
                (rest, r + a)
            else (rest, a)




def terminates_in_n (n : ℕ) (cfg : Com × Store) (σ' : Store) : ℚ :=
    let configs := eval n cfg
    let len := List.length configs
    let iter := iterate (Aux7 σ') len
    (iter (configs, 0.0)).2
  




def Aux1 : List ((Com × Store) × ℚ) × ℚ → List ((Com × Store) × ℚ)
  | (xs, r) => List.map (fun (cs, p) => (cs, r * p)) xs

def Aux2 : (Com × Store) × ℚ → List ((Com × Store) × ℚ) × ℚ
    | ((c, σ), r) => (oneStep (c, σ), r)

def Aux3 : List ((Com × Store) × ℚ) → List (List ((Com × Store) × ℚ))
    | xs => List.map (Aux1 ∘ Aux2) xs

def Aux4 : List (List ((Com × Store) × ℚ)) → List ((Com × Store) × ℚ)
  | xs => xs.foldr (· ++ ·) []

def Aux5 : List ((Com × Store) × ℚ) → List ((Com × Store) × ℚ) :=
    (Aux4 ∘ Aux3)



def eval : ℕ → Com × Store → List ((Com × Store) × ℚ)
  | 0, cfg => [ (cfg, 1.0) ]
  | (Nat.succ n), cfg =>
    let prev := eval n cfg
    let result := Aux5  prev
    result




def Aux : List ((Com × Store) × ℚ) → List ((Com × Store) × ℚ)
  | xs => xs.foldr
      (fun ((c, σ), r) acc =>
        (oneStep (c, σ)).map (fun ((c', σ'), p) => ((c', σ'), r * p)) ++ acc)
      []



def eval : ℕ → Com × Store → List ((Com × Store) × ℚ)
  | 0, cfg => [ (cfg, 1.0) ]
  | (Nat.succ n), cfg =>
    let prev := eval n cfg
    let result := Aux  prev
    result





def terminates_in_n (n : ℕ) (cfg : Com × Store) (σ' : Store) : ℚ :=
  let configs := eval n cfg
  configs.foldl
    (fun acc ((c, σ), p) =>
      if c = Com.skip ∧ storeEq σ σ' then acc + p else acc)
    0.0